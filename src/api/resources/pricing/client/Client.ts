/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CovalentApi } from "@fern-api/covalent";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CovalentApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * [Full Endpoint Documentation](https://www.covalenthq.com/docs/api/#/0/Get%20NFT%20transactions%20for%20contract/USD/1)
     * Given `chain_id` and `contract_address`, return a list of all token IDs  for the NFT contract on the blockchain."
     *
     */
    public async getTokenIds(
        chainId: string,
        quoteCurrency: string,
        contractAddress: string,
        request?: CovalentApi.TokenIdsRequestType
    ): Promise<CovalentApi.TokenIdResponseType> {
        const _queryParams = new URLSearchParams();
        if (request?.pageNumber != null) {
            _queryParams.append("page_number", request?.pageNumber.toString());
        }

        if (request?.pageSize != null) {
            _queryParams.append("page_size", request?.pageSize.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CovalentApiEnvironment.Production,
                `/v1/pricing/historical_by_address/${chainId}/${quoteCurrency}/${contractAddress}/nft_token_ids/`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.pricing.getTokenIds.Response.parse(
                _response.body as serializers.pricing.getTokenIds.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CovalentApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CovalentApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CovalentApiTimeoutError();
            case "unknown":
                throw new errors.CovalentApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
